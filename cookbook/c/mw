S=add
cat <<eof
== Portable Example ==
The [http://code.kx.com/wsvn/code/cookbook_code/c/ source].

The code in <tt>[http://code.kx.com/wsvn/code/cookbook_code/c/$S.c $S.c]
</tt> adds two Kdb+ integers and returns the result.  
The code is portable across all kdb+ supported platforms.  
As mentioned above and in [[Cookbook/InterfacingWithC]], you will need
[http://code.kx.com/wsvn/code/kx/kdb+/c/c/k.h k.h].  

'''$S.c'''
<pre>
eof
cat $S.c
cat <<eof
</pre>

=== Building on Windows with Microsoft Compiler ===
You might be expecting the function to look like:
<pre>
__declspec(dllexport) void __cdecl $S(K x,K y)
...
</pre>

but we can avoid polluting our portable code by writing an
<tt>[http://code.kx.com/wsvn/code/cookbook_code/c/$S.def $S.def]</tt> file

'''$S.def'''
<pre>
eof
cat $S.def
cat <<eof
</pre>

The functions defined in k.h are implemented in [http://code.kx.com/wsvn/code/kx/kdb%2B/w32/q.lib q.lib] (32bit)

Then, with k.h, $S.c, $S.def, q.lib we can build a c extension:
<pre>
eof
echo cl /LD $S.c $S.def q.lib
C='q)(`add 2:(`add;2))[3i;4i]'
cat <<eof
</pre>

Now, with q in your path and in the current directory containing <tt>$S.dll</tt>:

<pre>
$C
7i
</pre>

TODO: Windows with MinGW

=== Linux ===

<pre>
gcc -shared -fPIC add.c -o add.so
</pre>

=== Solaris ===

<pre>
gcc -G -fPIC  add.c -o add.so
</pre>

=== Mac OS X ===

<pre>
gcc -bundle -undefined dynamic_lookup add.c -o add.so
</pre>


The resulting binary should be placed in the same directory as the q executable.
Solaris x86_64 may require -nostdlib as that lib may not have been pic compiled.
Mac osx seems to require explicit -m64 flag for 64bit builds.

eof
